#!/usr/bin/env python3
import math
import rclpy
from rclpy.node import Node

from sensor_msgs.msg import LaserScan
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist
from tf_transformations import euler_from_quaternion

STATE_FORWARD  = 'FORWARD'
STATE_BRAKE    = 'BRAKE'
STATE_TURN     = 'TURN'
STATE_RETURN   = 'RETURN_HOME'
STATE_DONE     = 'DONE'

class BaselineSweeper(Node):
    def __init__(self):
        super().__init__('baseline_sweeper')

        # Publishers & Subscribers
        self.cmd_vel_pub = self.create_publisher(Twist, 'cmd_vel', 10)
        self.scan_sub = self.create_subscription(LaserScan, 'scan', self.scan_callback, 10)
        self.odom_sub = self.create_subscription(Odometry, 'odom', self.odom_callback, 10)

        self.timer = self.create_timer(0.1, self.timer_callback)  # 10 Hz

        # Laser data
        self.laser_ranges = []
        # Robot pose
        self.current_x = 0.0
        self.current_y = 0.0
        self.current_yaw= 0.0
        self.start_x = None
        self.start_y = None

        # Four corners in a 8x8 or 10x10 warehouse (adjust as needed)
        self.corners = [
            (4.0, -4.0),
            (4.0,  4.0),
            (-4.0, 4.0),
            (-4.0, -4.0)
        ]
        self.visited_corners = [False]*len(self.corners)
        self.corner_tolerance = 1.0

        # State machine
        self.state = STATE_FORWARD
        self.brake_time = 0
        self.brake_time_target = 0
        self.turn_dir = -1  # default turn right
        self.turn_time = 0
        self.turn_time_target = 0

        # Movement params
        self.forward_speed = 0.3
        self.obstacle_threshold = 1.5

        self.get_logger().info('BaselineSweeper node started.')

    def scan_callback(self, msg: LaserScan):
        self.laser_ranges = list(msg.ranges)

    def odom_callback(self, msg: Odometry):
        p = msg.pose.pose.position
        self.current_x = p.x
        self.current_y = p.y
        q = msg.pose.pose.orientation
        _, _, yaw = euler_from_quaternion([q.x, q.y, q.z, q.w])
        self.current_yaw = yaw

        if self.start_x is None:
            self.start_x = self.current_x
            self.start_y = self.current_y
            self.get_logger().info(f"Start pose recorded: ({self.start_x:.2f}, {self.start_y:.2f})")

    def timer_callback(self):
        if not self.laser_ranges:
            return

        self.check_corners_visited()
        all_corners_visited = all(self.visited_corners)

        if all_corners_visited and self.state not in [STATE_RETURN, STATE_DONE]:
            self.get_logger().info("All corners visited; heading back to start!")
            self.state = STATE_RETURN

        twist = Twist()

        if self.state == STATE_FORWARD:
            # Move forward unless there's an obstacle
            front_dist = self.get_front_distance()
            if front_dist < self.obstacle_threshold:
                # brake
                self.state = STATE_BRAKE
                self.brake_time = 0
                self.brake_time_target = 5
            else:
                twist.linear.x = self.forward_speed

        elif self.state == STATE_BRAKE:
            # Stop briefly
            self.brake_time += 1
            if self.brake_time >= self.brake_time_target:
                # Decide which way to turn
                self.decide_turn_direction()
                self.state = STATE_TURN
                self.turn_time = 0
                self.turn_time_target = 10

        elif self.state == STATE_TURN:
            # turn in place
            twist.angular.z = 0.5 * self.turn_dir
            self.turn_time += 1
            if self.turn_time >= self.turn_time_target:
                self.state = STATE_FORWARD

        elif self.state == STATE_RETURN:
            # navigate back to start pose
            dx = self.start_x - self.current_x
            dy = self.start_y - self.current_y
            dist_home = math.sqrt(dx*dx + dy*dy)
            if dist_home < 0.5:
                self.get_logger().info("Reached start point => DONE.")
                self.state = STATE_DONE
            else:
                # naive approach: just turn toward start and go
                desired_yaw = math.atan2(dy, dx)
                yaw_err = desired_yaw - self.current_yaw
                yaw_err = math.atan2(math.sin(yaw_err), math.cos(yaw_err))
                twist.angular.z = max(-0.5, min(0.5, 1.0 * yaw_err))
                if abs(yaw_err) < 0.2:
                    twist.linear.x = 0.2

        elif self.state == STATE_DONE:
            twist.linear.x = 0.0
            twist.angular.z = 0.0

        self.cmd_vel_pub.publish(twist)

    def get_front_distance(self):
        if not self.laser_ranges:
            return float('inf')
        mid = len(self.laser_ranges)//2
        return self.laser_ranges[mid]

    def decide_turn_direction(self):
        # Basic logic: turn right by default
        self.turn_dir = -1
        self.get_logger().info("Braking done. Turning RIGHT...")

    def check_corners_visited(self):
        for i, (cx, cy) in enumerate(self.corners):
            if not self.visited_corners[i]:
                dist = math.sqrt((cx - self.current_x)**2 + (cy - self.current_y)**2)
                if dist < self.corner_tolerance:
                    self.visited_corners[i] = True
                    self.get_logger().info(f"Visited corner {i+1} at ({cx:.1f}, {cy:.1f}).")

def main(args=None):
    rclpy.init(args=args)
    node = BaselineSweeper()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
